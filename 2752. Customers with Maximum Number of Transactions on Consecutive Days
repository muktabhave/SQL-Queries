Table: Transactions

+------------------+------+
| Column Name      | Type |
+------------------+------+
| transaction_id   | int  |
| customer_id      | int  |
| transaction_date | date |
| amount           | int  |
+------------------+------+
transaction_id is the column with unique values of this table.
Each row contains information about transactions that includes unique (customer_id, transaction_date) along with the corresponding customer_id and amount.   
Write a solution to find all customer_id who made the maximum number of transactions on consecutive days.

Return all customer_id with the maximum number of consecutive transactions. Order the result table by customer_id in ascending order.

The result format is in the following example.

 

Example 1:

Input: 
Transactions table:
+----------------+-------------+------------------+--------+
| transaction_id | customer_id | transaction_date | amount |
+----------------+-------------+------------------+--------+
| 1              | 101         | 2023-05-01       | 100    |
| 2              | 101         | 2023-05-02       | 150    |
| 3              | 101         | 2023-05-03       | 200    |
| 4              | 102         | 2023-05-01       | 50     |
| 5              | 102         | 2023-05-03       | 100    |
| 6              | 102         | 2023-05-04       | 200    |
| 7              | 105         | 2023-05-01       | 100    |
| 8              | 105         | 2023-05-02       | 150    |
| 9              | 105         | 2023-05-03       | 200    |
+----------------+-------------+------------------+--------+
Output: 
+-------------+
| customer_id | 
+-------------+
| 101         | 
| 105         | 
+-------------+
Explanation: 
- customer_id 101 has a total of 3 transactions, and all of them are consecutive.
- customer_id 102 has a total of 3 transactions, but only 2 of them are consecutive. 
- customer_id 105 has a total of 3 transactions, and all of them are consecutive.
In total, the highest number of consecutive transactions is 3, achieved by customer_id 101 and 105. The customer_id are sorted in ascending order.


_________________________________SOLUTION____________________________________

WITH RECURSIVE NewTransactions AS
(
    SELECT
        T.transaction_id,
        T.customer_id,
        T.transaction_date,
        T.lag_transaction_date,
        DATEDIFF(T.transaction_date, T.lag_transaction_date) AS transaction_date_difference,
        T.amount,
        T.row_num,
        1 AS group_num
    FROM
    (
        SELECT
            transaction_id,
            customer_id,
            transaction_date,
            COALESCE(LAG(transaction_date) OVER(PARTITION BY customer_id ORDER BY transaction_date), transaction_date) AS lag_transaction_date,
            amount,
            ROW_NUMBER() OVER() AS row_num
        FROM Transactions
    ) T
    WHERE T.row_num = 1

    UNION

    SELECT
        T.transaction_id,
        T.customer_id,
        T.transaction_date,
        T.lag_transaction_date,
        DATEDIFF(T.transaction_date, T.lag_transaction_date) AS transaction_date_difference,
        T.amount,
        T.row_num,
        CASE
            WHEN DATEDIFF(T.transaction_date, T.lag_transaction_date) > 1 THEN N.group_num+1
            ELSE N.group_num
        END AS group_num
    FROM
        NewTransactions N,
        (
            SELECT
                transaction_id,
                customer_id,
                transaction_date,
                COALESCE(LAG(transaction_date) OVER(PARTITION BY customer_id ORDER BY transaction_date), transaction_date) AS lag_transaction_date,
                amount,
                ROW_NUMBER() OVER() AS row_num
            FROM Transactions
        ) T
    WHERE T.row_num = N.row_num+1 AND
          T.row_num <= (SELECT COUNT(*) FROM Transactions)
),
NumberOfTransactions AS
(
    SELECT
        *,
        MAX(num_transactions) OVER() max_num_transactions
    FROM
    (
        SELECT
            customer_id,
            COUNT(*) AS num_transactions
        FROM NewTransactions
        GROUP BY
            customer_id,
            group_num
    ) N
)
SELECT customer_id
FROM NumberOfTransactions
WHERE num_transactions = max_num_transactions;
